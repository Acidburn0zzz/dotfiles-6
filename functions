#############
# Functions #

# Use Apple's man page viewer if we are on a local console
if [[ "$TERM_PROGRAM" == "Apple_Terminal" || "$TERM_PROGRAM" == "iTerm.app" ]]; then
  function man {
    open x-man-page://$1
  }
fi

# Print all valid tmux colors and their names
function tmuxcolors {
  for i in {0..255} ; do
    printf "\x1b[38;5;${i}mcolour${i}\n"
  done
}

# Shortcut for `bundle exec rails` and `bundle exec rake`.
# If script/rails and script/rake are available, use them instead as they are much
# faster to execute than `bundle exec`.
function r() {
  if [[ "g|generate|c|console|s|server|db|dbconsole|new" =~ $1 ]]; then
    if [[ -x script/rails ]]; then
      script/rails $@
    else
      bundle exec rails $@
    fi
  else
    if [[ -x script/rake ]]; then
      script/rake $@
    else
      bundle exec rake $@
    fi
  fi
}

# Copy contents of a file to a clipboard
function cb {
  if [ -e "$@" ]; then
    cat "$@" | pbcopy
  else
    echo $@ "not found."
  fi
}

# Print the contents of a directory after changing into it.
function cdls { cd "$@"; ls -p; }

function setbasedir {
  if [ -z "$1" ]; then
    WD=$(setbasedirhelper);
  else
    WD=$(setbasedirhelper "$1");
  fi
  echo "Setting base directory to " $WD
  export WORKING_BASE_DIRECTORY="$WD"
}

# Mark a file as safe so OS X doesn't ask for confirmation when opening
function marksafe {
  echo "Marking items in" $@ "safe."
  xattr -rd com.apple.quarantine "$@"
}

function mute {
  osascript -e 'set volume 0'
}

function allerb2html {
  ack -g --nocolor erb | xargs ruby -e 'puts %Q(Converting: #{ARGV.join(", ")})'
  ack -g --nocolor erb | xargs ruby -e 'ARGV.each { |i| puts %Q(html2haml -e #{i} #{i.sub(/erb$/,"haml")}) }' | bash
  ack -g --nocolor erb | xargs trash
}

# Show any running processes matching input
function proc {
  ps -ef | grep $1 | grep -v grep
}

# (Re)create softlink at $NVM_DIR/bin/node pointing to the current default node
function relinknode {
  rm $NVM_DIR/bin/node
  ln -s $(nvm which default) $NVM_DIR/bin/node
}

# Show files changed in stash at specified position
function showStashFilesAt {
  git stash show stash@{$1}
}

# Show diff in stash at specified position
function showStashPatchAt {
  git stash show -p stash@{$1}
}

